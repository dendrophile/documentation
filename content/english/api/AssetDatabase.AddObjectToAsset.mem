Adds /objectToAdd/ to an existing asset at /path/.
Please note that you should only add assets to '.asset' assets, imported models or texture assets for example will lose their data.
All paths are relative to the project folder. Like: "Assets/MyTextures/hello.png"
BEGIN EX

	@MenuItem("GameObject/Create Material")
	static function CreateMaterial () {
		// Create a simple material asset
		var material = new Material (Shader.Find("Specular"));
		AssetDatabase.CreateAsset(material, "Assets/MyMaterial.mat");

		// Add an animation clip to it
		var animationClip = new AnimationClip ();
		animationClip.name = "My Clip";
		AssetDatabase.AddObjectToAsset(animationClip, material);

		// Reimport the asset after adding an object.
		// Otherwise the change only shows up when saving the project
		AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(animationClip));

		// Print the path of the created asset
		Debug.Log(AssetDatabase.GetAssetPath(material));
	}
END EX<signature>
AddObjectToAsset_object_string
AddObjectToAsset_object_object
</signature>
Adds /objectToAdd/ to an existing asset identified by /assetObject/.
Please note that you should only add assets to '.asset' files, imported models or texture assets for example will lose their data when reimporting or quitting Unity.
BEGIN EX

	@MenuItem("GameObject/Create Material")
	static function CreateMaterial () {
		// Create a simple material asset
		var material = new Material (Shader.Find("Specular"));
		AssetDatabase.CreateAsset(material, "Assets/MyMaterial.mat");

		// Add an animation clip to it
		var animationClip = new AnimationClip ();
		animationClip.name = "My Clip";
		AssetDatabase.AddObjectToAsset(animationClip, material);

		// Reimport the asset after adding an object.
		// Otherwise the change only shows up when saving the project
		AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(animationClip));

		// Print the path of the created asset
		Debug.Log(AssetDatabase.GetAssetPath(material));
	}
END EX
