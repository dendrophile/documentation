<signature>
Foldout_bool_string_GUIStyle
Foldout_bool_GUIContent_GUIStyle
</signature>
Make a label with a foldout arrow to the left of it.
This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.

{img FoldoutUsage.png}\\
''Create a foldable menu that hides/shows the selected transform.''
BEGIN EX

	// Create a foldable menu that hides/shows the selected transform
	// position.
	// if no Transform is selected, the Foldout item will be folded until
	// a transform is selected.
	
	class FoldoutUsage extends EditorWindow {
	
		var showPosition : boolean = true;
		var status : String = "Select a GameObject";
		@MenuItem("Examples/Foldout Usage")
		static function Init() {
			var window = GetWindow(FoldoutUsage);
			window.Show();
		}
		
		function OnGUI() {
			showPosition = EditorGUILayout.Foldout(showPosition, status);
			if(showPosition)
				if(Selection.activeTransform) {
					Selection.activeTransform.position = 
						EditorGUILayout.Vector3Field("Position", Selection.activeTransform.position);
						status = Selection.activeTransform.name;
				}
			
			if(!Selection.activeTransform) {
				status = "Select a GameObject";
				showPosition = false;	
			}
		}
		function OnInspectorUpdate() {
			this.Repaint();
		}
	}
END EX

@param foldout The shown foldout state.
@param content The label to show.
@param style Optional [[GUIStyle]].
@returns The foldout state selected by the user. If true, you should render sub-objects.
